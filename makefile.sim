# Compiles firmware written in C and assembler for NXP's LPC chips
# Copyright (C) 2013  Richard Meadows
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Directories
#
# These define the locations of the source and output trees.
include dir_list.mk

# External makefile.conf
#
# Edit the project name, chip, includes directories and so on in this file.
#
include $(BUILD_DIR)/$(BOARD).conf
OUTPUT_DIR := out_$(BOARD)

# Shell Commands
#
# Listed here for portability.
#
CAT	:= cat
ECHO	:= echo
FIND	:= find
GREP	:= grep
MKDIR	:= mkdir -p
RM	:= rm -rf
SED	:= sed
SHUF	:= shuf

# Native GNU GCC
TARGET	:=
AS	:= as
CC	:= gcc
CXX	:= g++
OBJCOPY	:= objcopy
SIZE	:= size

GCC_BASE_FLAGS = -std=c11 -Wall -Wextra -Wshadow -Wundef -pedantic
GCC_BASE_FLAGS += -Wstrict-prototypes -Wwrite-strings
GCC_BASE_FLAGS += -Wpointer-arith -Wredundant-decls -Wunreachable-code
# to do:  -Wcast-align -Wcast-qual -Wmissing-prototypes

# Compilation Flags
#
# Display all warnings. Compile functions and data into their own sections so
# they can be discarded if unused.  The linker performs garbage collection of
# unused input sections.
CFLAGS = $(FLAGS) -Os $(GCC_BASE_FLAGS) -Wno-unused-parameter -ffunction-sections -fdata-sections $(ARCH_FLAGS) $(USR_CFLAGS)
CFLAGS += -Wstrict-prototypes -Wmissing-prototypes -Wwrite-strings
CFLAGS += -Wpointer-arith -Wcast-align -Wredundant-decls -Wunreachable-code
CFLAGS += -Wformat -Wformat-signedness
# to do: -Wcast-qual

ASFLAGS = $(FLAGS) $(ARCH_FLAGS)
LDFLAGS = $(FLAGS) $(LINKER_FLAGS) -Wextra $(ARCH_FLAGS)

# Default target
all: $(OUTPUT_DIR)/$(PROJECT_NAME)

# Create a definitive list of sources for the project by
# combining OTHER_SOURCES with sources.mk
SOURCES := $(SIM_SOURCES)
include $(BUILD_DIR)/sources.mk
SOURCES := $(filter-out $(IGNORES), $(SOURCES))

# Translate this list of sources into a list of required objects
# in the output directory
objects = $(patsubst %.c,%.o,$(patsubst %.S,%.o,$(patsubst %.s,%.o,$(SOURCES))))
OBJECTS = $(addprefix $(OUTPUT_DIR)/,$(objects))

# Version
# I'd rather have real dependencies than abuse the .PHONY flag
src/rev.h: $(SOURCES)
	(git rev-parse --short=8 HEAD | awk '{print "#define GIT_REV \"" $$1 "\""}'; \
	! git diff | grep -q .; echo "#define GIT_DIRTY $$?")  > $@
	git rev-parse --short=8 HEAD | awk '{print "#define GIT_REV_32BIT 0x" $$1 ""}' >> $@
$(OUTPUT_DIR)/src/main.o $(OUTPUT_DIR)/src/mailbox.o $(OUTPUT_DIR)/src/console.o: src/rev.h

# Rule for generating object and dependancy files from source files
#
# Creates a directory in the output tree if nessesary. File is only compiled,
# not linked. Dependancy generation is automatic, but only for user header
# files. Every depandancy in the .d is appended to the .d as a target, so that
# if they stop existing the corresponding object file will be re-compiled.
#
$(OUTPUT_DIR)/%.o: %.c
	@$(ECHO)
	@$(ECHO) 'Compiling $<...'
	@$(MKDIR) $(OUTPUT_DIR)/$(dir $<)
	$(CC) -c -MMD $(CPPFLAGS) $(CFLAGS) $(addprefix -I,$(INCLUDES)) -o $@ $<
	@$(SED) -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' -e '/^$$/ d' -e 's/$$/ :/' < $(OUTPUT_DIR)/$*.d >> $(OUTPUT_DIR)/$*.d;

# Attempt to include the dependancy makefiles for every object in this makefile.
#
# This means that object files depend on the header files they include.
#
-include $(OBJECTS:.o=.d)

# Rule for generating object files from assembler files
#
# Creates a directory in the output tree if nessesary. The file is only
# assembled, not linked.
#
$(OUTPUT_DIR)/%.o: %.s
	@$(ECHO)
	@$(ECHO) 'Assembling $<...'
	@$(MKDIR) $(OUTPUT_DIR)/$(dir $<)
	$(AS) $(ASFLAGS) -o $@ $<

# Generate the main build artifact.
#
# A .elf containing all the symbols (i.e. debugging information if the compiler
# / linker was run with -g) is created, alongside .hex and .bin files. A just
# about human-readable .map is also created.
#
$(OUTPUT_DIR)/$(PROJECT_NAME): $(OBJECTS) $(LINKERS)
	@$(ECHO) 'Linking $@...'
	@$(MKDIR) $(dir $@)
	$(CC) $(LDFLAGS) $(addprefix -T,$(LINKERS)) -Wl,-Map,$@.map -o $@ $(OBJECTS)
	@$(ECHO)
	$(SIZE) $@
	@$(ECHO)

# =============== Auto-Generated Mailbox Interface ================
MKMBOX=scripts/mkmbox.py
MBOX_DEF=mailbox_def
MBOX_DOC=mailbox.md
$(OUTPUT_DIR)/src/mailbox.o: $(SOURCE_DIR)/$(MBOX_DEF).c $(INCLUDE_DIR)/$(MBOX_DEF).h

$(INCLUDE_DIR)/$(MBOX_DEF).h: $(INCLUDE_DIR)/mbox.def $(MKMBOX)
	python3 $(MKMBOX) -d $< -o $@

$(SOURCE_DIR)/$(MBOX_DEF).c: $(INCLUDE_DIR)/mbox.def
	python3 $(MKMBOX) -d $< -o $@

WRAPPER=$(OUTPUT_DIR)/ptywrap
$(WRAPPER): $(BOARD)/ptywrap.c
	@$(MKDIR) $(dir $@)
	$(CC) $(GCC_BASE_FLAGS) -Wmissing-prototypes -Wcast-align -Wcast-qual $^ -o $@

.PHONY: wrap
wrap: $(WRAPPER) $(OUTPUT_DIR)/$(PROJECT_NAME)
	$^

.PHONY: wrap_start
wrap_start: $(WRAPPER) $(OUTPUT_DIR)/$(PROJECT_NAME)
	$(WRAPPER) --start $(OUTPUT_DIR)/$(PROJECT_NAME)

# Removes everything in the output directory
.PHONY: clean
clean:
	$(RM) $(OUTPUT_DIR)
	$(RM) src/rev.h

.PHONY: run
run: $(OUTPUT_DIR)/$(PROJECT_NAME)
	$(OUTPUT_DIR)/$(PROJECT_NAME)
