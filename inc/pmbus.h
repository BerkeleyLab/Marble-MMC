#ifndef _PMBUS_H_
#define _PMBUS_H_

/* A set of Power Management Bus (PMBus) conversion utilities
 */

#ifdef __cplusplus
 extern "C" {
#endif

#include <stdint.h>

// ========================= Compile Time Conversion ==========================
// Linear16 (L16) unsigned type
#define V_TO_L16(v)                                                     (v<<13)
#define L16_TO_V(l)                                                     (l>>13)

#define MV_TO_L16(v)                                             ((v<<13)/1000)
#define L16_TO_MV(l)                                             (1000*(l>>13))

// Linear11 (L11) signed type
// https://en.wikipedia.org/wiki/Power_Management_Bus#Linear11_Floating-Point_Format
#define V_TO_L11(v) \
  ((v<<16) < 1024) && ((v<<16) > -1025) ? ((0x10 << 11) | ((v<<16) & 0x7ff)) : \
  ((v<<15) < 1024) && ((v<<15) > -1025) ? ((0x11 << 11) | ((v<<15) & 0x7ff)) : \
  ((v<<14) < 1024) && ((v<<14) > -1025) ? ((0x12 << 11) | ((v<<14) & 0x7ff)) : \
  ((v<<13) < 1024) && ((v<<13) > -1025) ? ((0x13 << 11) | ((v<<13) & 0x7ff)) : \
  ((v<<12) < 1024) && ((v<<12) > -1025) ? ((0x14 << 11) | ((v<<12) & 0x7ff)) : \
  ((v<<11) < 1024) && ((v<<11) > -1025) ? ((0x15 << 11) | ((v<<11) & 0x7ff)) : \
  ((v<<10) < 1024) && ((v<<10) > -1025) ? ((0x16 << 11) | ((v<<10) & 0x7ff)) : \
  ((v<< 9) < 1024) && ((v<< 9) > -1025) ? ((0x17 << 11) | ((v<< 9) & 0x7ff)) : \
  ((v<< 8) < 1024) && ((v<< 8) > -1025) ? ((0x18 << 11) | ((v<< 8) & 0x7ff)) : \
  ((v<< 7) < 1024) && ((v<< 7) > -1025) ? ((0x19 << 11) | ((v<< 7) & 0x7ff)) : \
  ((v<< 6) < 1024) && ((v<< 6) > -1025) ? ((0x1a << 11) | ((v<< 6) & 0x7ff)) : \
  ((v<< 5) < 1024) && ((v<< 5) > -1025) ? ((0x1b << 11) | ((v<< 5) & 0x7ff)) : \
  ((v<< 4) < 1024) && ((v<< 4) > -1025) ? ((0x1c << 11) | ((v<< 4) & 0x7ff)) : \
  ((v<< 3) < 1024) && ((v<< 3) > -1025) ? ((0x1d << 11) | ((v<< 3) & 0x7ff)) : \
  ((v<< 2) < 1024) && ((v<< 2) > -1025) ? ((0x1e << 11) | ((v<< 2) & 0x7ff)) : \
  ((v<< 1) < 1024) && ((v<< 1) > -1025) ? ((0x1f << 11) | ((v<< 1) & 0x7ff)) : \
  ((v<< 0) < 1024) && ((v<< 0) > -1025) ? ((0x00 << 11) | ((v<< 0) & 0x7ff)) : \
  ((v>> 1) < 1024) && ((v>> 1) > -1025) ? ((0x01 << 11) | ((v>> 1) & 0x7ff)) : \
  ((v>> 2) < 1024) && ((v>> 2) > -1025) ? ((0x02 << 11) | ((v>> 2) & 0x7ff)) : \
  ((v>> 3) < 1024) && ((v>> 3) > -1025) ? ((0x03 << 11) | ((v>> 3) & 0x7ff)) : \
  ((v>> 4) < 1024) && ((v>> 4) > -1025) ? ((0x04 << 11) | ((v>> 4) & 0x7ff)) : \
  ((v>> 5) < 1024) && ((v>> 5) > -1025) ? ((0x05 << 11) | ((v>> 5) & 0x7ff)) : \
  ((v>> 6) < 1024) && ((v>> 6) > -1025) ? ((0x06 << 11) | ((v>> 6) & 0x7ff)) : \
  ((v>> 7) < 1024) && ((v>> 7) > -1025) ? ((0x07 << 11) | ((v>> 7) & 0x7ff)) : \
  ((v>> 8) < 1024) && ((v>> 8) > -1025) ? ((0x08 << 11) | ((v>> 8) & 0x7ff)) : \
  ((v>> 9) < 1024) && ((v>> 9) > -1025) ? ((0x09 << 11) | ((v>> 9) & 0x7ff)) : \
  ((v>>10) < 1024) && ((v>>10) > -1025) ? ((0x0a << 11) | ((v>>10) & 0x7ff)) : \
  ((v>>11) < 1024) && ((v>>11) > -1025) ? ((0x0b << 11) | ((v>>11) & 0x7ff)) : \
  ((v>>12) < 1024) && ((v>>12) > -1025) ? ((0x0c << 11) | ((v>>12) & 0x7ff)) : \
  ((v>>13) < 1024) && ((v>>13) > -1025) ? ((0x0d << 11) | ((v>>13) & 0x7ff)) : \
  ((v>>14) < 1024) && ((v>>14) > -1025) ? ((0x0e << 11) | ((v>>14) & 0x7ff)) : \
                                          ((0x0f << 11) | ((v>>15) & 0x7ff))

#define L11_TO_V(l) \
  (l & 0x400) ? \
    (l & 0x8000) ? \
      (-1*((~l & 0x3ff) + 1) >> ((~(l >> 11) & 0xf) + 1)) \
    : \
      (-1*((~l & 0x3ff) + 1) << ((l >> 11) & 0xf)) \
  : \
    (l & 0x8000) ? \
      ((l & 0x3ff) >> (~(l >> 11) & 0xf) + 1) \
    : \
      ((l & 0x3ff) << ((l >> 11) & 0xf))

#define MV_TO_L11(v) \
  ((((v<<16)/1000) >> 0 ) < 1024) && ((((v<<16)/1000) >> 0 ) > -1025) ? ((0x10 << 11) | ((((v<<16)/1000) >> 0 ) & 0x7ff)) : \
  ((((v<<16)/1000) >> 1 ) < 1024) && ((((v<<16)/1000) >> 1 ) > -1025) ? ((0x11 << 11) | ((((v<<16)/1000) >> 1 ) & 0x7ff)) : \
  ((((v<<16)/1000) >> 2 ) < 1024) && ((((v<<16)/1000) >> 2 ) > -1025) ? ((0x12 << 11) | ((((v<<16)/1000) >> 2 ) & 0x7ff)) : \
  ((((v<<16)/1000) >> 3 ) < 1024) && ((((v<<16)/1000) >> 3 ) > -1025) ? ((0x13 << 11) | ((((v<<16)/1000) >> 3 ) & 0x7ff)) : \
  ((((v<<16)/1000) >> 4 ) < 1024) && ((((v<<16)/1000) >> 4 ) > -1025) ? ((0x14 << 11) | ((((v<<16)/1000) >> 4 ) & 0x7ff)) : \
  ((((v<<16)/1000) >> 5 ) < 1024) && ((((v<<16)/1000) >> 5 ) > -1025) ? ((0x15 << 11) | ((((v<<16)/1000) >> 5 ) & 0x7ff)) : \
  ((((v<<16)/1000) >> 6 ) < 1024) && ((((v<<16)/1000) >> 6 ) > -1025) ? ((0x16 << 11) | ((((v<<16)/1000) >> 6 ) & 0x7ff)) : \
  ((((v<<16)/1000) >> 7 ) < 1024) && ((((v<<16)/1000) >> 7 ) > -1025) ? ((0x17 << 11) | ((((v<<16)/1000) >> 7 ) & 0x7ff)) : \
  ((((v<<16)/1000) >> 8 ) < 1024) && ((((v<<16)/1000) >> 8 ) > -1025) ? ((0x18 << 11) | ((((v<<16)/1000) >> 8 ) & 0x7ff)) : \
  ((((v<<16)/1000) >> 9 ) < 1024) && ((((v<<16)/1000) >> 9 ) > -1025) ? ((0x19 << 11) | ((((v<<16)/1000) >> 9 ) & 0x7ff)) : \
  ((((v<<16)/1000) >> 10) < 1024) && ((((v<<16)/1000) >> 10) > -1025) ? ((0x1a << 11) | ((((v<<16)/1000) >> 10) & 0x7ff)) : \
  ((((v<<16)/1000) >> 11) < 1024) && ((((v<<16)/1000) >> 11) > -1025) ? ((0x1b << 11) | ((((v<<16)/1000) >> 11) & 0x7ff)) : \
  ((((v<<16)/1000) >> 12) < 1024) && ((((v<<16)/1000) >> 12) > -1025) ? ((0x1c << 11) | ((((v<<16)/1000) >> 12) & 0x7ff)) : \
  ((((v<<16)/1000) >> 13) < 1024) && ((((v<<16)/1000) >> 13) > -1025) ? ((0x1d << 11) | ((((v<<16)/1000) >> 13) & 0x7ff)) : \
  ((((v<<16)/1000) >> 14) < 1024) && ((((v<<16)/1000) >> 14) > -1025) ? ((0x1e << 11) | ((((v<<16)/1000) >> 14) & 0x7ff)) : \
  ((((v<<16)/1000) >> 15) < 1024) && ((((v<<16)/1000) >> 15) > -1025) ? ((0x1f << 11) | ((((v<<16)/1000) >> 15) & 0x7ff)) : \
  ((((v<<16)/1000) >> 16) < 1024) && ((((v<<16)/1000) >> 16) > -1025) ? ((0x00 << 11) | ((((v<<16)/1000) >> 16) & 0x7ff)) : \
  ((((v<<16)/1000) >> 17) < 1024) && ((((v<<16)/1000) >> 17) > -1025) ? ((0x01 << 11) | ((((v<<16)/1000) >> 17) & 0x7ff)) : \
  ((((v<<16)/1000) >> 18) < 1024) && ((((v<<16)/1000) >> 18) > -1025) ? ((0x02 << 11) | ((((v<<16)/1000) >> 18) & 0x7ff)) : \
  ((((v<<16)/1000) >> 19) < 1024) && ((((v<<16)/1000) >> 19) > -1025) ? ((0x03 << 11) | ((((v<<16)/1000) >> 19) & 0x7ff)) : \
  ((((v<<16)/1000) >> 20) < 1024) && ((((v<<16)/1000) >> 20) > -1025) ? ((0x04 << 11) | ((((v<<16)/1000) >> 20) & 0x7ff)) : \
  ((((v<<16)/1000) >> 21) < 1024) && ((((v<<16)/1000) >> 21) > -1025) ? ((0x05 << 11) | ((((v<<16)/1000) >> 21) & 0x7ff)) : \
  ((((v<<16)/1000) >> 22) < 1024) && ((((v<<16)/1000) >> 22) > -1025) ? ((0x06 << 11) | ((((v<<16)/1000) >> 22) & 0x7ff)) : \
  ((((v<<16)/1000) >> 23) < 1024) && ((((v<<16)/1000) >> 23) > -1025) ? ((0x07 << 11) | ((((v<<16)/1000) >> 23) & 0x7ff)) : \
  ((((v<<16)/1000) >> 24) < 1024) && ((((v<<16)/1000) >> 24) > -1025) ? ((0x08 << 11) | ((((v<<16)/1000) >> 24) & 0x7ff)) : \
  ((((v<<16)/1000) >> 25) < 1024) && ((((v<<16)/1000) >> 25) > -1025) ? ((0x09 << 11) | ((((v<<16)/1000) >> 25) & 0x7ff)) : \
  ((((v<<16)/1000) >> 26) < 1024) && ((((v<<16)/1000) >> 26) > -1025) ? ((0x0a << 11) | ((((v<<16)/1000) >> 26) & 0x7ff)) : \
  ((((v<<16)/1000) >> 27) < 1024) && ((((v<<16)/1000) >> 27) > -1025) ? ((0x0b << 11) | ((((v<<16)/1000) >> 27) & 0x7ff)) : \
  ((((v<<16)/1000) >> 28) < 1024) && ((((v<<16)/1000) >> 28) > -1025) ? ((0x0c << 11) | ((((v<<16)/1000) >> 28) & 0x7ff)) : \
  ((((v<<16)/1000) >> 29) < 1024) && ((((v<<16)/1000) >> 29) > -1025) ? ((0x0d << 11) | ((((v<<16)/1000) >> 29) & 0x7ff)) : \
  ((((v<<16)/1000) >> 30) < 1024) && ((((v<<16)/1000) >> 30) > -1025) ? ((0x0e << 11) | ((((v<<16)/1000) >> 30) & 0x7ff)) : \
                                                                        ((0x0f << 11) | ((((v<<16)/1000) >> 31) & 0x7ff))

#define L11_TO_MV(l) \
  (l & 0x400) ? \
    (l & 0x8000) ? \
      (-1000*((~l & 0x3ff) + 1) >> ((~(l >> 11) & 0xf) + 1)) \
    : \
      (-1000*((~l & 0x3ff) + 1) << ((l >> 11) & 0xf)) \
  : \
    (l & 0x8000) ? \
      (1000*(l & 0x3ff) >> (~(l >> 11) & 0xf) + 1) \
    : \
      (1000*(l & 0x3ff) << ((l >> 11) & 0xf))

// =========================== Runtime Conversion =============================
uint16_t v_to_l11_int(int v);
uint16_t v_to_l11_float(float v);
uint16_t v_to_l11_double(double v);
uint16_t mv_to_l11_int(int mv);
uint16_t mv_to_l11_float(float mv);
uint16_t mv_to_l11_double(double mv);
int l11_to_v_int(uint16_t l);
int l11_to_mv_int(uint16_t l);
float l11_to_v_float(uint16_t l);
float l11_to_mv_float(uint16_t l);
double l11_to_v_double(uint16_t l);
double l11_to_mv_double(uint16_t l);

int l16_to_v_int(uint16_t l);
float l16_to_v_float(uint16_t l);
double l16_to_v_double(uint16_t l);
int l16_to_mv_int(uint16_t l);
float l16_to_mv_float(uint16_t l);
double l16_to_mv_double(uint16_t l);

// ============================ Diagnostic Macros =============================
// Diagnostic macros
#define print_L11_TO_V(l) do { \
  printf("0x%x: ", l); \
  if (l & 0x400) { \
    if (l & 0x8000) { \
      printf("A (-%d)*2^(-%d) = %d\r\n", ((~l & 0x3ff) + 1), ((~(l >> 11) & 0xf) + 1), -1*((~l & 0x3ff) + 1) >> ((~(l >> 11) & 0xf) + 1)); \
    } else { \
      printf("B (-%d)*2^(%d) = %d\r\n", ((~l & 0x3ff) + 1), ((l >> 11) & 0xf), -1*((~l & 0x3ff) + 1) << ((l >> 11) & 0xf)); \
    } \
  } else { \
    if (l & 0x8000) { \
      printf("C (%d)*2^(-%d) = %d\r\n", (l & 0x3ff), ((~(l >> 11) & 0xf) + 1), ((l & 0x3ff) >> (~(l >> 11) & 0xf) + 1)); \
    } else { \
      printf("D (%d)*2^(%d) = %d\r\n", (l & 0x3ff), ((l >> 11) & 0x1f), ((l & 0x3ff) << ((l >> 11) & 0xf))); \
    } \
  } \
} while (0)


#ifdef __cplusplus
}
#endif

#endif // _PMBUS_H_
