# Bespoke-syntax mailbox definition file (JSON with comments)
#
# To generate #include statements in the source file, there should be one special
# key-value pair named "include" whose value is a list of file names to include
# (as strings).
#
# Every other key-value pair represents a page of the mailbox.
# Each page is a key-value pair where the key is 'pageN' where 1 <= N <= 128
# The value of the key-value pair is a list of dicts where each dict represents
# an entry in the mailbox whose address/index is inferred from its position in
# the list. Note that this requires dummy entries for unused addresses.
# The names of these entries can be empty strings.
#
# Mailbox Element Dict Structure:
# -------------------------------
#   Mandatory Parameters:
#     Name      Type    Valid values        Desc
#     ------------------------------------------
#     name      string  *                   Mandatory name of mailbox entry
#
#   Optional Parameters:
#     Name      Type    Valid values        Desc
#     ------------------------------------------
#     type      string  "int", "float"      Data type to assist in interpreting the contents of the member
#     size      int     1,2,3,4             Number of bytes that make up element
#     output    string  *                   How to write the value to the mailbox (where does it come from)
#     input     string  *                   How to read the value from the mailbox (where does it go)
#     fmt       string  printf fmt string   Format string for data formatting/presentation.
#                                           Accepts both printf-style (e.g. '%x') and new Python format
#                                           strings (e.g. '{:x}')
#     desc      string  *                   Human-readable description of the data member
#     scale     float   *                   Multiply the value read from the mailbox by 'scale' to get
#                                           physical units (before handed to 'fmt')
#
#   Note: if 'size' param is >1, adjacent entries will be created with names 0 to size-1 (in MSB-to-LSB order)
#
#   input param:
#     The special character '@' will be replaced with the value read from the mailbox (and is thus an r-value).
#     Thus, to pass the value to function 'foo' as the first parameter, simply use "foo(@)".  To assign the
#     value to a global variable 'bar', use "bar = @"
#
#   output param:
#     The special character '@' will be replaced with the destination in the mailbox (and is thus an l-value).
#     If the value comes from the return value of function 'foo', use "@ = foo()"
#     If the value is read via a volatile argument to function bar, use "bar(&@)"

{
#  "include" : [
#    "marble_api.h",
#    "i2c_pm.h",
#    "mailbox.h",
#    "rev.h",
#    "max6639.h"
#  ],
# Page 2 contains only inputs (MMC <= FPGA)
  "page2" : [
    { "name" : "FMC_MGT_CTL",
      "type" : "int",
      "fmt"  : "0x{:x}",
      "desc" : "",
      "input" : "mbox_handle_fmc_mgt_ctl(@)"
    }
  ],
# Page 3 contains only outputs (MMC => FPGA)
  "page3" : [
    { "name" : "COUNT",
      "size" : 2,
      "type" : "int",
      "desc" : "Mailbox update counter",
      "fmt"  : "%d",
      "output" : "@ = mbox_get_update_count()"
    },
    { "name" : "PAD1"},
    { "name" : "PAD2"},
    { "name" : "LM75_0",
      "size" : 2,
      "type" : "float",
      "fmt"  : "{:.1f} degC",
      "scale": 0.5,
      "output" : "LM75_read(LM75_0, LM75_TEMP, (int *)&@)"
    },
    { "name" : "LM75_1",
      "size" : 2,
      "type" : "float",
      "fmt"  : "{:.1f} degC",
      "scale": 0.5,
      "output" : "LM75_read(LM75_1, LM75_TEMP, (int *)&@)"
    },
    { "name" : "FMC_ST",
      "type" : "int",
      "fmt"  : "",
      "output"  : "@ = marble_FMC_status()"
    },
    { "name" : "PWR_ST",
      "type" : "int",
      "fmt"  : "",
      "output"  : "@ = marble_PWR_status()"
    },
    { "name" : "MGTMUX_ST",
      "type" : "int",
      "fmt"  : "",
      "output"  : "@ = marble_MGTMUX_status()"
    },
    { "name" : "PAD3"
    },
    { "name" : "GIT32",
      "type" : "int",
      "size" : 4,
      "fmt"  : "{:08X}",
      "output" : "@ = GIT_REV_32BIT"
    }
  ],
# Page 4 contains only outputs (MMC => FPGA)
  "page4" : [
    { "name" : "MAX_T1_HI",
      "output" : "@ = return_max6639_reg(MAX6639_TEMP_CH1)"
    },
    { "name" : "MAX_T1_LO",
      "output" : "@ = return_max6639_reg(MAX6639_TEMP_EXT_CH1)"
    },
    { "name" : "MAX_T2_HI",
      "output" : "@ = return_max6639_reg(MAX6639_TEMP_CH2)"
    },
    { "name" : "MAX_T2_LO",
      "output" : "@ = return_max6639_reg(MAX6639_TEMP_EXT_CH2)"
    },
    { "name" : "MAX_F1_TACH",
      "output" : "@ = return_max6639_reg(MAX6639_FAN1_TACH_CNT)"
    },
    { "name" : "MAX_F2_TACH",
      "output" : "@ = return_max6639_reg(MAX6639_FAN2_TACH_CNT)"
    },
    { "name" : "MAX_F1_DUTY",
      "output" : "@ = return_max6639_reg(MAX6639_FAN1_DUTY)",
      "scale": 0.833333,
      "fmt"  : "{:.1f} %"
    },
    { "name" : "MAX_F2_DUTY",
      "output" : "@ = return_max6639_reg(MAX6639_FAN2_DUTY)",
      "scale"  : 0.833333,
      "fmt"  : "{:.1f} %"
    },
    {
      "name" : "PCB_REV",
      "output" : "@ = marble_get_board_id()",
      "fmt"  : "0x{:x}"
    },
    { "name" : "COUNT",
      "size" : 2,
      "type" : "int",
      "desc" : "Mailbox update counter",
      "fmt"  : "%d",
      "output" : "@ = mbox_get_update_count()"
    }
  ],
# Page 5 contains both inputs and outputs (MMC <=> FPGA)
  "page5" : [
    { "name" : "I2C_BUS_STATUS",
      "type" : "int",
      "fmt"  : "0b{:b}",
      "output": "@ = (uint8_t)getI2CBusStatus()",
      "input" : "mbox_handleI2CBusStatusMsg(@)"
    }
  ]
}




